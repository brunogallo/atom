(function() {
  var ExposeTabView, path;

  path = require('path');

  ExposeTabView = require('../lib/expose-tab-view');

  describe("ExposeTabView", function() {
    var workspaceElement;
    workspaceElement = null;
    beforeEach(function() {
      workspaceElement = atom.views.getView(atom.workspace);
      return atom.project.setPaths([path.join(__dirname, 'fixtures')]);
    });
    describe("populateTabBody()", function() {
      it("can populate empty item", function() {
        var exposeTabView;
        exposeTabView = new ExposeTabView;
        expect(Object.getOwnPropertyNames(exposeTabView.item)).toHaveLength(0);
        expect(exposeTabView.find('.title').text()).toBe('untitled');
        expect(exposeTabView.tabBody.find('a')).toHaveLength(1);
        return expect(exposeTabView.tabBody.find('a').attr('class')).toContain('text');
      });
      it("populates normal text editor", function() {
        waitsForPromise(function() {
          return atom.workspace.open('sample1.txt');
        });
        return runs(function() {
          var exposeTabView, item;
          item = atom.workspace.getActivePaneItem();
          exposeTabView = new ExposeTabView(item);
          expect(exposeTabView.item).toBeDefined();
          expect(exposeTabView.title).toBe('sample1.txt');
          expect(exposeTabView.tabBody.find('a')).toHaveLength(1);
          return expect(exposeTabView.tabBody.find('a').attr('class')).toContain('code');
        });
      });
      it("populates image editor", function() {
        waitsForPromise(function() {
          atom.packages.activatePackage('image-view');
          return atom.workspace.open('../../screenshots/preview.png');
        });
        return runs(function() {
          var exposeTabView, item;
          item = atom.workspace.getActivePaneItem();
          exposeTabView = new ExposeTabView(item);
          expect(exposeTabView.item).toBeDefined();
          expect(exposeTabView.title).toBe('preview.png');
          expect(exposeTabView.tabBody.find('img')).toHaveLength(1);
          return expect(exposeTabView.tabBody.find('img').attr('src')).toBeDefined();
        });
      });
      it("populates settings view", function() {
        waitsForPromise(function() {
          jasmine.attachToDOM(workspaceElement);
          return atom.packages.activatePackage('settings-view');
        });
        return runs(function() {
          atom.commands.dispatch(workspaceElement, 'settings-view:open');
          waitsFor(function() {
            return atom.workspace.getActivePaneItem();
          });
          return runs(function() {
            var exposeTabView, item;
            item = atom.workspace.getActivePaneItem();
            exposeTabView = new ExposeTabView(item);
            expect(exposeTabView.title).toBe('Settings');
            expect(exposeTabView.tabBody.find('a')).toHaveLength(1);
            return expect(exposeTabView.tabBody.find('a').attr('class')).toContain('tools');
          });
        });
      });
      it("populates archive view", function() {
        waitsForPromise(function() {
          atom.packages.activatePackage('archive-view');
          return atom.workspace.open('archive.zip');
        });
        return runs(function() {
          var exposeTabView, item;
          item = atom.workspace.getActivePaneItem();
          exposeTabView = new ExposeTabView(item);
          expect(exposeTabView.title).toBe('archive.zip');
          expect(exposeTabView.tabBody.find('a')).toHaveLength(1);
          return expect(exposeTabView.tabBody.find('a').attr('class')).toContain('zip');
        });
      });
      it("populates markdown view", function() {
        waitsForPromise(function() {
          atom.packages.activatePackage('markdown-preview');
          return atom.workspace.open('../../README.md');
        });
        return runs(function() {
          var item;
          item = null;
          atom.commands.dispatch(workspaceElement, 'markdown-preview:toggle');
          waitsFor(function() {
            return item = atom.workspace.getPaneItems()[1];
          });
          return runs(function() {
            var exposeTabView;
            exposeTabView = new ExposeTabView(item);
            expect(exposeTabView.title).toBe('Markdown Preview');
            expect(exposeTabView.tabBody.find('a')).toHaveLength(1);
            return expect(exposeTabView.tabBody.find('a').attr('class')).toContain('markdown');
          });
        });
      });
      return it("populates text editor with minimap activated", function() {
        waitsForPromise(function() {
          atom.packages.activatePackage('minimap');
          jasmine.attachToDOM(workspaceElement);
          return atom.workspace.open('sample1.txt');
        });
        return runs(function() {
          var exposeTabView, item;
          item = atom.workspace.getActivePaneItem();
          exposeTabView = new ExposeTabView(item);
          waitsFor(function() {
            return exposeTabView.tabBody.html();
          });
          return runs(function() {
            expect(exposeTabView.item).toBeDefined();
            expect(exposeTabView.title).toBe('sample1.txt');
            return expect(exposeTabView.tabBody.find('atom-text-editor-minimap')).toHaveLength(1);
          });
        });
      });
    });
    describe("closeTab()", function() {
      return it("destroys selected tab item", function() {
        waitsForPromise(function() {
          return atom.workspace.open('sample1.txt');
        });
        return runs(function() {
          var exposeTabView, item;
          item = atom.workspace.getActivePaneItem();
          exposeTabView = new ExposeTabView(item);
          expect(atom.workspace.getTextEditors()).toHaveLength(1);
          expect(exposeTabView.title).toBe('sample1.txt');
          expect(exposeTabView.destroyed).toBeFalsy();
          exposeTabView.closeTab();
          expect(atom.workspace.getTextEditors()).toHaveLength(0);
          return expect(exposeTabView.destroyed).toBeTruthy();
        });
      });
    });
    return describe("activateTab()", function() {
      return it("activates selected tab item", function() {
        waitsForPromise(function() {
          atom.workspace.open('sample1.txt');
          return atom.workspace.open('sample2.txt');
        });
        return runs(function() {
          var activeItem, exposeTabView, items;
          items = atom.workspace.getPaneItems();
          activeItem = atom.workspace.getActivePaneItem();
          exposeTabView = new ExposeTabView(items[0]);
          expect(items).toHaveLength(2);
          expect(activeItem.getTitle()).toBe('sample2.txt');
          expect(exposeTabView.title).toBe('sample1.txt');
          exposeTabView.activateTab();
          activeItem = atom.workspace.getActivePaneItem();
          return expect(activeItem.getTitle()).toBe('sample1.txt');
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/vitaminafront/.atom/packages/expose/spec/expose-tab-view-spec.coffee
