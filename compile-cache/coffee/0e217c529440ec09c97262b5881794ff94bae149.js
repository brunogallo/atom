(function() {
  var ExposeView, path;

  path = require('path');

  ExposeView = require('../lib/expose-view');

  describe("ExposeView", function() {
    var exposeView;
    exposeView = null;
    beforeEach(function() {
      exposeView = new ExposeView;
      return atom.project.setPaths([path.join(__dirname, 'fixtures')]);
    });
    describe("update()", function() {
      beforeEach(function() {
        waitsForPromise(function() {
          return atom.workspace.open('sample1.txt');
        });
        return waitsForPromise(function() {
          return atom.workspace.open('sample2.txt');
        });
      });
      it("populates list of open tabs", function() {
        expect(exposeView.tabList.children()).toHaveLength(0);
        expect(exposeView.tabs).toHaveLength(0);
        exposeView.update(true);
        expect(exposeView.tabList.children()).toHaveLength(2);
        return expect(exposeView.tabs).toHaveLength(2);
      });
      return it("assign colors to different panes", function() {
        var color1, color2;
        atom.workspace.getActivePane().splitRight({
          copyActiveItem: true
        });
        exposeView.update(true);
        expect(atom.workspace.getPanes()).toHaveLength(2);
        expect(exposeView.tabs).toHaveLength(3);
        color1 = exposeView.getGroupColor(0);
        color2 = exposeView.getGroupColor(1);
        expect(exposeView.tabs[1].color).toEqual(color1);
        expect(exposeView.tabs[2].color).toEqual(color2);
        return expect(color1).not.toEqual(color2);
      });
    });
    describe("activateTab(n)", function() {
      beforeEach(function() {
        waitsForPromise(function() {
          return atom.workspace.open('sample1.txt');
        });
        waitsForPromise(function() {
          return atom.workspace.open('sample2.txt');
        });
        return waitsForPromise(function() {
          return atom.workspace.open('sample3.txt');
        });
      });
      it("activates given tab", function() {
        exposeView.update(true);
        expect(atom.workspace.getActivePaneItem().getTitle()).toEqual('sample3.txt');
        exposeView.activateTab(2);
        expect(atom.workspace.getActivePaneItem().getTitle()).toEqual('sample2.txt');
        exposeView.activateTab(1);
        return expect(atom.workspace.getActivePaneItem().getTitle()).toEqual('sample1.txt');
      });
      return it("handles out of range input", function() {
        exposeView.update(true);
        expect(atom.workspace.getActivePaneItem().getTitle()).toEqual('sample3.txt');
        exposeView.activateTab(2);
        expect(atom.workspace.getActivePaneItem().getTitle()).toEqual('sample2.txt');
        exposeView.activateTab(9);
        expect(atom.workspace.getActivePaneItem().getTitle()).toEqual('sample3.txt');
        exposeView.activateTab(0);
        expect(atom.workspace.getActivePaneItem().getTitle()).toEqual('sample1.txt');
        exposeView.activateTab();
        return expect(atom.workspace.getActivePaneItem().getTitle()).toEqual('sample1.txt');
      });
    });
    describe("moveTab(from, to)", function() {
      beforeEach(function() {
        waitsForPromise(function() {
          return atom.workspace.open('sample1.txt');
        });
        waitsForPromise(function() {
          return atom.workspace.open('sample2.txt');
        });
        return waitsForPromise(function() {
          return atom.workspace.open('sample3.txt');
        });
      });
      it("can move tabs", function() {
        exposeView.update(true);
        expect(exposeView.tabs).toHaveLength(3);
        expect(exposeView.tabs[0].title).toEqual('sample1.txt');
        expect(exposeView.tabs[2].title).toEqual('sample3.txt');
        exposeView.moveTab(2, 0);
        expect(exposeView.tabs[0].title).toEqual('sample3.txt');
        return expect(exposeView.tabs[2].title).toEqual('sample2.txt');
      });
      it("can move tabs between panes", function() {
        var color1, color2, item;
        item = atom.workspace.getActivePaneItem();
        atom.workspace.getActivePane().splitRight({
          copyActiveItem: true
        });
        item.destroy();
        exposeView.update(true);
        color1 = exposeView.getGroupColor(0);
        color2 = exposeView.getGroupColor(1);
        expect(color1).not.toEqual(color2);
        expect(exposeView.tabs).toHaveLength(3);
        expect(exposeView.tabs[0].color).toEqual(color1);
        expect(exposeView.tabs[0].title).toEqual('sample1.txt');
        expect(exposeView.tabs[1].title).toEqual('sample2.txt');
        expect(exposeView.tabs[2].title).toEqual('sample3.txt');
        expect(exposeView.tabs[2].color).toEqual(color2);
        exposeView.moveTab(0, 2);
        expect(exposeView.tabs[1].title).toEqual('sample1.txt');
        expect(exposeView.tabs[1].color).toEqual(color2);
        expect(exposeView.tabs[0].title).toEqual('sample2.txt');
        expect(exposeView.tabs[0].color).toEqual(color1);
        exposeView.moveTab(1, 0);
        expect(exposeView.tabs[0].title).toEqual('sample1.txt');
        return expect(exposeView.tabs[0].color).toEqual(color1);
      });
      it("uses long title when there are multiple items with the same name", function() {
        atom.workspace.getActivePane().splitRight({
          copyActiveItem: true
        });
        exposeView.update(true);
        expect(exposeView.tabs).toHaveLength(4);
        expect(exposeView.tabs[0].title).toEqual('sample1.txt');
        expect(exposeView.tabs[2].title).toEqual('sample3.txt — fixtures');
        return expect(exposeView.tabs[3].title).toEqual('sample3.txt — fixtures');
      });
      it("handles missing long title", function() {
        var item;
        atom.workspace.getActivePane().splitRight({
          copyActiveItem: true
        });
        item = atom.workspace.getActivePaneItem();
        item.getLongTitle = void 0;
        exposeView.update(true);
        expect(exposeView.tabs[2].title).toEqual('sample3.txt — fixtures');
        return expect(exposeView.tabs[3].title).toEqual('sample3.txt');
      });
      return it("handles invalid input", function() {
        exposeView.update(true);
        exposeView.moveTab();
        expect(exposeView.tabs[0].title).toEqual('sample1.txt');
        exposeView.moveTab(9, 9);
        return expect(exposeView.tabs[2].title).toEqual('sample3.txt');
      });
    });
    describe("Cycle around in tabs", function() {
      beforeEach(function() {
        waitsForPromise(function() {
          return atom.workspace.open('sample1.txt');
        });
        waitsForPromise(function() {
          return atom.workspace.open('sample2.txt');
        });
        return waitsForPromise(function() {
          return atom.workspace.open('sample3.txt');
        });
      });
      it("marks active tab", function() {
        var item;
        exposeView.visible = true;
        exposeView.update();
        expect(exposeView.tabs[2].isActiveTab()).toBeTruthy();
        expect(exposeView.tabs[0].hasClass('active')).toBeFalsy();
        expect(exposeView.tabs[1].hasClass('active')).toBeFalsy();
        expect(exposeView.tabs[2].hasClass('active')).toBeTruthy();
        item = atom.workspace.getPaneItems()[0];
        atom.workspace.paneForItem(item).activateItem(item);
        expect(exposeView.tabs[0].isActiveTab()).toBeTruthy();
        expect(exposeView.tabs[2].hasClass('active')).toBeFalsy();
        expect(exposeView.tabs[1].hasClass('active')).toBeFalsy();
        return expect(exposeView.tabs[0].hasClass('active')).toBeTruthy();
      });
      it("can go to next tab", function() {
        exposeView.update(true);
        exposeView.activateTab(1);
        expect(atom.workspace.getActivePaneItem().getTitle()).toEqual('sample1.txt');
        exposeView.nextTab();
        expect(atom.workspace.getActivePaneItem().getTitle()).toEqual('sample2.txt');
        exposeView.nextTab();
        expect(atom.workspace.getActivePaneItem().getTitle()).toEqual('sample3.txt');
        exposeView.nextTab();
        return expect(atom.workspace.getActivePaneItem().getTitle()).toEqual('sample1.txt');
      });
      return it("can go to previous tab", function() {
        exposeView.update(true);
        expect(atom.workspace.getActivePaneItem().getTitle()).toEqual('sample3.txt');
        exposeView.nextTab(-1);
        expect(atom.workspace.getActivePaneItem().getTitle()).toEqual('sample2.txt');
        exposeView.nextTab(-1);
        expect(atom.workspace.getActivePaneItem().getTitle()).toEqual('sample1.txt');
        exposeView.nextTab(-1);
        return expect(atom.workspace.getActivePaneItem().getTitle()).toEqual('sample3.txt');
      });
    });
    describe("Hide expose view", function() {
      var activationPromise, workspaceElement, _ref;
      _ref = [], workspaceElement = _ref[0], activationPromise = _ref[1];
      beforeEach(function() {
        workspaceElement = atom.views.getView(atom.workspace);
        return activationPromise = atom.packages.activatePackage('expose');
      });
      return it("closes expose panel", function() {
        atom.commands.dispatch(workspaceElement, 'expose:toggle');
        waitsForPromise(function() {
          return activationPromise;
        });
        return runs(function() {
          var exposeModule;
          exposeModule = atom.packages.loadedPackages['expose'].mainModule;
          expect(exposeModule.modalPanel.isVisible()).toBe(true);
          exposeView.exposeHide();
          expect(exposeModule.modalPanel.isVisible()).toBe(false);
          exposeView.exposeHide();
          return expect(exposeModule.modalPanel.isVisible()).toBe(false);
        });
      });
    });
    return describe("Stay updated on changes", function() {
      beforeEach(function() {
        return waitsForPromise(function() {
          return atom.workspace.open('sample1.txt');
        });
      });
      it("updates on add/destroy items", function() {
        exposeView.visible = true;
        exposeView.update();
        expect(exposeView.tabs).toHaveLength(1);
        waitsForPromise(function() {
          return atom.workspace.open('sample2.txt');
        });
        return runs(function() {
          expect(exposeView.tabs).toHaveLength(2);
          atom.workspace.getActivePaneItem().destroy();
          return expect(exposeView.tabs).toHaveLength(1);
        });
      });
      return it("does not update when not visible", function() {
        exposeView.update(true);
        expect(exposeView.tabs).toHaveLength(1);
        waitsForPromise(function() {
          return atom.workspace.open('sample2.txt');
        });
        return runs(function() {
          return expect(exposeView.tabs).toHaveLength(1);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/vitaminafront/.atom/packages/expose/spec/expose-view-spec.coffee
